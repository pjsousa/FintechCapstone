#!/usr/bin/env python
from __future__ import print_function
from __future__ import division
import argparse
import sys
from utils import scenarioc
import numpy as np
import pandas as pd


def dump_setup(args):
	from FintechCapstone import setup

	setup()

def dump_config(config_path):
	from FintechCapstone import dump_config

	return dump_config(config_path)

def exec_fetch(model_name, scenario, microtlist):
	from FintechCapstone import FinCapstone

	date_from = '2009-01-01'
	date_to = '2017-03-01'
	timespan = {
		"short_term": [1, 5]
		,"medium_term": [40]
		,"long_term": [90]
	}

	if scenario is None:
		scenario = "scenarioc"

	if microtlist:
		_ticker_list = ["NVDA","NFLX","AAPL"]
	else:
		_ticker_list = None

	trial = FinCapstone(
		scenario=scenario
		, ticker_list = _ticker_list
		, encode_workpages=7
		, model_name=model_name
		, ticker_list_samplesize=4000
		, timespan=timespan
		, date_from=date_from
		, reset_status=True)

	trial.run_initial_dataload()

def exec_fengineer(model_name, scenario, microtlist):
	from FintechCapstone import FinCapstone

	date_from = '2009-01-01'
	date_to = '2017-03-01'
	timespan = {
		"short_term": [1, 5]
		,"medium_term": [40]
		,"long_term": [90]
	}

	if scenario is None:
		scenario = "scenarioc"

	if microtlist:
		_ticker_list = ["NVDA","NFLX","AAPL"]
	else:
		_ticker_list = None

	trial = FinCapstone(
		scenario=scenario
		, ticker_list = _ticker_list
		, encode_workpages=7
		, model_name=model_name
		, ticker_list_samplesize=4000
		, timespan=timespan
		, date_from=date_from
		, reset_status=False)

	trial.feature_engineering()

def exec_training(model_name, scenario, microtlist, useSample, input_shape, filter_shape, output_size, FC_layers, earlystop, size, bins, finetune, dropout, optimizer):
	from FintechCapstone import FinCapstone

	date_from = '2009-01-01'
	date_to = '2017-03-01'
	timespan = {
		"short_term": [1, 5]
		,"medium_term": [40]
		,"long_term": [90]
	}

	if scenario is None:
		scenario = "scenarioc"

	if microtlist:
		_ticker_list = ["NVDA","NFLX","AAPL"]
	else:
		_ticker_list = None

	trial = FinCapstone(
		scenario=scenario
		, ticker_list = _ticker_list
		, encode_workpages=7
		, model_name=model_name
		, ticker_list_samplesize=4000
		, timespan=timespan
		, date_from=date_from
		, reset_status=False)

	trial.train(train_next=1, nb_epoch=2000, useSample=useSample, input_shape=input_shape, filter_shape=filter_shape, 
				output_size=output_size, FC_layers=FC_layers, earlystop=earlystop, timespan=size, bins=bins, 
				finetune=finetune, dropout=dropout, optimizer=optimizer)


def exec_fencode(model_name, scenario, microtlist, work_page, useSample, size, bins):
	from FintechCapstone import FinCapstone

	date_from = '2009-01-01'
	date_to = '2017-03-01'
	timespan = {
		"short_term": [1, 5]
		,"medium_term": [40]
		,"long_term": [90]
	}

	if scenario is None:
		scenario = "scenarioc"

	if microtlist:
		_ticker_list = ["NVDA","NFLX","AAPL"]
	else:
		_ticker_list = None

	trial = FinCapstone(
		scenario=scenario
		, ticker_list = _ticker_list
		, encode_workpages=7
		, model_name=model_name
		, ticker_list_samplesize=4000
		, timespan=timespan
		, date_from=date_from
		, reset_status=False)

	#trial.train(train_next=1, nb_epoch=5)
	trial.feature_encoding(work_page=work_page, useSample=useSample, timespan=size, bins=bins)

def exec_eval(model_name, scenario, input_shape, filter_shape, output_size, FC_layers, size, bins, finetune, dropout, optimizer):
	from FintechCapstone import FinCapstone

	date_from = '2009-01-01'
	date_to = '2017-03-01'
	timespan = {
		"short_term": [1, 5]
		,"medium_term": [40]
		,"long_term": [90]
	}

	if scenario is None:
		scenario = "scenarioc"

	_ticker_list = None

	trial = FinCapstone(
		scenario=scenario
		, ticker_list = _ticker_list
		, encode_workpages=7
		, model_name=model_name
		, ticker_list_samplesize=4000
		, timespan=timespan
		, date_from=date_from
		, reset_status=False)

	trial.evaluate(None, input_shape=input_shape, filter_shape=filter_shape, 
				output_size=output_size, FC_layers=FC_layers, timespan=size, bins=bins, 
				finetune_path=finetune, dropout=dropout, optimizer=optimizer)

def exec_predict(model_name, scenario, input_shape, filter_shape, output_size, FC_layers, size, bins, finetune, dropout, optimizer):
	from FintechCapstone import FinCapstone

	date_from = '2009-01-01'
	date_to = '2017-03-01'
	timespan = {
		"short_term": [1, 5]
		,"medium_term": [40]
		,"long_term": [90]
	}

	if scenario is None:
		scenario = "scenarioc"

	_ticker_list = None

	trial = FinCapstone(
		scenario=scenario
		, ticker_list = _ticker_list
		, encode_workpages=7
		, model_name=model_name
		, ticker_list_samplesize=4000
		, timespan=timespan
		, date_from=date_from
		, reset_status=False)



	_tickers, _dates, _labels = scenarioc.prepare_problemspace(trial.valid_ticker_list(), size, bins)

	print("Valid Tickers ", _tickers, _dates)

	_dates = _dates[(_dates > trial.test_from) & (_dates < trial.test_until)]
	_tickers = _tickers[(_dates > trial.test_from) & (_dates < trial.test_until)]

	_dates = np.array([ x.strftime('%Y-%m-%d') for x in _dates])

	_r = trial.predict_scenarioc(finetune, _tickers, _dates, input_shape=input_shape, filter_shape=filter_shape, 
				output_size=output_size, FC_layers=FC_layers, timespan=size, bins=bins, 
				dropout=dropout, optimizer=optimizer)

	_r.to_csv("predictions_{}.csv".format(model_name), index=None)


def exec_archive(model_name, scenario, archivname):
	from FintechCapstone import FinCapstone

	date_from = '2009-01-01'
	date_to = '2017-03-01'
	timespan = {
		"short_term": [1, 5]
		,"medium_term": [40]
		,"long_term": [90]
	}

	if scenario is None:
		scenario = "scenarioc"

	trial = FinCapstone(
		scenario=scenario
		, ticker_list = _ticker_list
		, encode_workpages=7
		, model_name=model_name
		, ticker_list_samplesize=4000
		, timespan=timespan
		, date_from=date_from
		, reset_status=False)

	trial.store_status_files(archivname)



if __name__ == "__main__":
	ap = argparse.ArgumentParser()

	ap.add_argument("--setup", required=False, help="Create directory structure.", action="store_true")
	ap.add_argument("--dump-config", required=False, help="Create dump configuration file.")
	ap.add_argument("--config", required=False, help="Configuration file to use.")
	ap.add_argument("--microtlist", required=False, help="Only use 3 tickers", action="store_true")
	ap.add_argument("--fetch", required=False, help="Execute a fetch session.", action="store_true")
	ap.add_argument("--fengineer", required=False, help="Execute a fengineer session.", action="store_true")
	ap.add_argument("--train", required=False, help="Execute a training session.", action="store_true")
	ap.add_argument("--evaluate", required=False, help="Execute an evaluation session.", action="store_true")
	ap.add_argument("--fencode", required=False, help="Perform feature encoding on the specified block.")
	ap.add_argument("--name", required=False, help="The model name.")
	ap.add_argument("--scenario", required=False, help="The scenario to use.")
	ap.add_argument("--subsample", required=False, help="The subsampling probability [0 - 100]")
	ap.add_argument("--size", required=False, help="The image side size for the mtf encoding. Used in --fencode and --train")
	ap.add_argument("--bins", required=False, help="The number of bins when performing the mtf encoding.")
	ap.add_argument("--filtersize", required=False, help="The filter side size for the convolutions.")
	ap.add_argument("--noutputs", required=False, help="The number of outputs of the model.")
	ap.add_argument("--FCBlocks", required=False, help="The number of fully connected blocks in the model.")
	ap.add_argument("--arch", required=False, help="Copies and renames the current status files of the specified model_name into an --arch name. Also copies last weights files.")
	ap.add_argument("--earlystop", required=False, help="Sets the tolerance for early stopping.")
	ap.add_argument("--finetune", required=False, help="Filename of weights to preload the model to finetune")
	ap.add_argument("--dropout", required=False, help="Dropout probabilities to add between the fully connected layers")
	ap.add_argument("--optimizer", required=False, help="Optimizer to use in finetuning")
	ap.add_argument("--predict", required=False, help="Generates a predictions file to use in the Web App", action="store_true")


	args = None
	try:
		args = vars(ap.parse_args())
	except Exception as e:
		ap.print_help()
		print("Examples: ")
		print("Calling a fetch session:")
		print("./capstonecli --name TestModel --scenario scenarioc --fetch")
		print("\n\nCalling a feature engineering session:")
		print("./capstonecli --name TestModel --scenario scenarioc --fengineer")
		print("\n\nCalling a feature encoding session to run the first 'page' and subsampling half of the images")
		print("./capstonecli --name TestModel --scenario scenarioc --subsample 50 --fencode 0")
		print("\n\nAlso calling a feature encoding session but creating 120x120 images and 60 bins for the timeseries quantization.")
		print("./capstonecli --name TestModel --scenario scenarioc --size 120 --bins 60 --fencode 0")
		print("\n\Calling a training session.")
		print("./capstonecli --name TestModel --scenario scenarioc --train")
		print("\n\Calling a training session that also uses a sample of the images in disk.")
		print("./capstonecli --name TestModel --scenario scenarioc --subsample 50 --train")
		print("\n\Calling a training session and overriding the model dimensions.")
		print("./capstonecli --name TestModel --scenario scenarioc --size 100 --filtersize 5 --noutputs 1 --FCBlocks 2 --train")
		

# ./capstonecli --setup
# ./capstonecli --name TestModelPY27 --scenario scenarioc --fetch --microtlist
# ./capstonecli --name TestModelPY27 --scenario scenarioc --fengineer --microtlist
# ./capstonecli --name TestModelPY27 --scenario scenarioc --subsample 1.5062 --size 40 --bins 100 --fencode 0 --microtlist
# ./capstonecli --name TestModelPY27 --scenario scenarioc --subsample 1.5062 --size 40 --bins 100 --fencode 1 --microtlist
# ./capstonecli --name TestModelPY27 --scenario scenarioc --subsample 1.5062 --size 40 --bins 100 --fencode 2 --microtlist
# ./capstonecli --name TestModelPY27 --scenario scenarioc --subsample 1.5062 --size 40 --bins 100 --fencode 3 --microtlist
# ./capstonecli --name TestModelPY27 --scenario scenarioc --subsample 1.5062 --size 40 --bins 100 --fencode 4 --microtlist
# ./capstonecli --name TestModelPY27 --scenario scenarioc --subsample 1.5062 --size 40 --bins 100 --fencode 5 --microtlist
# ./capstonecli --name TestModelPY27 --scenario scenarioc --subsample 1.5062 --size 40 --bins 100 --fencode 6 --microtlist
# ./capstonecli --name TestModelPY27 --scenario scenarioc --bins 100 --size 40 --filtersize 3 --subsample 50 --earlystop 5 --train
# ./capstonecli --name TestModelPY27 --scenario scenarioc --bins 100 --size 40 --filtersize 3 --finetune TestModelPY27_0.5  --evaluate
# ./capstonecli --name TestModelPY27 --scenario scenarioc --bins 100 --size 40 --filtersize 3 --finetune TestModelPY27_0.5  --predict

	if args is None:
		sys.exit()

	if args["setup"]:
		dump_setup(args)

	if not(args["dump_config"] is None):
		dump_config(args["dump_config"])

	if args["fetch"]:
		exec_fetch(args["name"], args["scenario"], args["microtlist"])

	if args["fengineer"]:
		exec_fengineer(args["name"], args["scenario"], args["microtlist"])

	if not(args["fencode"] is None):
		_subsample = 1.0 if args["subsample"] is None else float(args["subsample"]) / 100.0
		_size = 224 if args["size"] is None else int(args["size"])
		_bins = 100 if args["bins"] is None else int(args["bins"])

		exec_fencode(args["name"], args["scenario"], args["microtlist"], int(args["fencode"]), _subsample, _size, _bins)

	if args["train"]:
		_subsample = 1.0 if args["subsample"] is None else float(args["subsample"]) / 100.0

		_input_shape = (224, 224, 3) if args["size"] is None else (int(args["size"]), int(args["size"]), 3)
		_size = 224 if args["size"] is None else int(args["size"])
		_filtersize = (3, 3) if args["filtersize"] is None else (int(args["filtersize"]), int(args["filtersize"]))
		_noutputs = 3 if args["noutputs"] is None else int(args["noutputs"])
		_FCBlocks = 4 if args["FCBlocks"] is None else int(args["FCBlocks"])
		_earlystop = 5 if args["earlystop"] is None else int(args["earlystop"])
		_bins = 100 if args["bins"] is None else int(args["bins"])
		_finetune = None if args["finetune"] is None else args["finetune"]
		_dropout = 0.0 if args["dropout"] is None else float(args["dropout"])
		_optimizer = "adam" if args["optimizer"] is None else args["optimizer"]

		exec_training(args["name"], args["scenario"], args["microtlist"], _subsample
						, _input_shape, _filtersize, _noutputs, _FCBlocks, _earlystop, _size
						, _bins, _finetune, _dropout, _optimizer)

	if args["evaluate"]:
		_input_shape = (224, 224, 3) if args["size"] is None else (int(args["size"]), int(args["size"]), 3)
		_size = 224 if args["size"] is None else int(args["size"])
		_filtersize = (3, 3) if args["filtersize"] is None else (int(args["filtersize"]), int(args["filtersize"]))
		_noutputs = 3 if args["noutputs"] is None else int(args["noutputs"])
		_FCBlocks = 4 if args["FCBlocks"] is None else int(args["FCBlocks"])
		_bins = 100 if args["bins"] is None else int(args["bins"])
		_finetune = None if args["finetune"] is None else args["finetune"]
		_dropout = 0.0 if args["dropout"] is None else float(args["dropout"])
		_optimizer = "adam" if args["optimizer"] is None else args["optimizer"]

		exec_eval(args["name"], args["scenario"], _input_shape, _filtersize, _noutputs
						, _FCBlocks, _size, _bins, _finetune, _dropout, _optimizer)

	if args["predict"]:
		_input_shape = (224, 224, 3) if args["size"] is None else (int(args["size"]), int(args["size"]), 3)
		_size = 224 if args["size"] is None else int(args["size"])
		_filtersize = (3, 3) if args["filtersize"] is None else (int(args["filtersize"]), int(args["filtersize"]))
		_noutputs = 3 if args["noutputs"] is None else int(args["noutputs"])
		_FCBlocks = 4 if args["FCBlocks"] is None else int(args["FCBlocks"])
		_bins = 100 if args["bins"] is None else int(args["bins"])
		_finetune = None if args["finetune"] is None else args["finetune"]
		_dropout = 0.0 if args["dropout"] is None else float(args["dropout"])
		_optimizer = "adam" if args["optimizer"] is None else args["optimizer"]

		exec_predict(args["name"], args["scenario"], _input_shape, _filtersize, _noutputs
						, _FCBlocks, _size, _bins, _finetune, _dropout, _optimizer)

	if args["arch"]:
		exec_archive(args["name"], args["scenario"], args["arch"])



